{"/home/travis/build/npmtest/node-npmtest-generator-angular-php/test.js":"/* istanbul instrument in package npmtest_generator_angular_php */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-generator-angular-php/lib.npmtest_generator_angular_php.js":"/* istanbul instrument in package npmtest_generator_angular_php */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_generator_angular_php = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_generator_angular_php = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-generator-angular-php/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-generator-angular-php && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_generator_angular_php */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_generator_angular_php\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_generator_angular_php.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_generator_angular_php.rollup.js'] =\n            local.assetsDict['/assets.npmtest_generator_angular_php.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_generator_angular_php.__dirname + '/lib.npmtest_generator_angular_php.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-generator-angular-php/node_modules/generator-angular-php/app/index.js":"'use strict';\nvar fs = require('fs');\nvar path = require('path');\nvar util = require('util');\nvar angularUtils = require('../util.js');\nvar yeoman = require('yeoman-generator');\nvar yosay = require('yosay');\nvar wiredep = require('wiredep');\nvar chalk = require('chalk');\n\nvar Generator = module.exports = function Generator(args, options) {\n  yeoman.generators.Base.apply(this, arguments);\n  this.argument('appname', { type: String, required: false });\n  this.appname = this.appname || path.basename(process.cwd());\n  this.appname = this._.camelize(this._.slugify(this._.humanize(this.appname)));\n\n  this.option('app-suffix', {\n    desc: 'Allow a custom suffix to be added to the module name',\n    type: String,\n    required: 'false'\n  });\n  this.env.options['app-suffix'] = this.options['app-suffix'];\n  this.scriptAppName = this.appname + angularUtils.appName(this);\n\n  args = ['main'];\n\n  if (typeof this.env.options.appPath === 'undefined') {\n    this.option('appPath', {\n      desc: 'Generate CoffeeScript instead of JavaScript'\n    });\n\n    this.env.options.appPath = this.options.appPath;\n\n    if (!this.env.options.appPath) {\n      try {\n        this.env.options.appPath = require(path.join(process.cwd(), 'bower.json')).appPath;\n      } catch (e) {}\n    }\n    this.env.options.appPath = this.env.options.appPath || 'app';\n    this.options.appPath = this.env.options.appPath;\n  }\n\n  this.appPath = this.env.options.appPath;\n\n  if (typeof this.env.options.coffee === 'undefined') {\n    this.option('coffee', {\n      desc: 'Generate CoffeeScript instead of JavaScript'\n    });\n\n    // attempt to detect if user is using CS or not\n    // if cml arg provided, use that; else look for the existence of cs\n    if (!this.options.coffee &&\n      this.expandFiles(path.join(this.appPath, '/scripts/**/*.coffee'), {}).length > 0) {\n      this.options.coffee = true;\n    }\n\n    this.env.options.coffee = this.options.coffee;\n  }\n\n  this.hookFor('angular-php:common', {\n    args: args\n  });\n\n  this.hookFor('angular-php:main', {\n    args: args\n  });\n\n  this.hookFor('angular-php:controller', {\n    args: args\n  });\n\n  this.on('end', function () {\n\n    var enabledComponents = [];\n\n    if (this.animateModule) {\n      enabledComponents.push('angular-animate/angular-animate.js');\n    }\n\n    if (this.cookiesModule) {\n      enabledComponents.push('angular-cookies/angular-cookies.js');\n    }\n\n    if (this.resourceModule) {\n      enabledComponents.push('angular-resource/angular-resource.js');\n    }\n\n    if (this.routeModule) {\n      enabledComponents.push('angular-route/angular-route.js');\n    }\n\n    if (this.sanitizeModule) {\n      enabledComponents.push('angular-sanitize/angular-sanitize.js');\n    }\n\n    if (this.touchModule) {\n      enabledComponents.push('angular-touch/angular-touch.js');\n    }\n\n    enabledComponents = [\n      'angular/angular.js',\n      'angular-mocks/angular-mocks.js'\n    ].concat(enabledComponents).join(',');\n\n    var jsExt = this.options.coffee ? 'coffee' : 'js';\n\n    this.invoke('karma:app', {\n      options: {\n        'skip-install': this.options['skip-install'],\n        'base-path': '../',\n        'coffee': this.options.coffee,\n        'travis': true,\n        'bower-components': enabledComponents,\n        'app-files': 'app/scripts/**/*.' + jsExt,\n        'test-files': [\n          'test/mock/**/*.' + jsExt,\n          'test/spec/**/*.' + jsExt\n        ].join(','),\n        'bower-components-path': 'bower_components'\n      }\n    });\n\n    this.installDependencies({\n      skipInstall: this.options['skip-install'],\n      skipMessage: this.options['skip-message'],\n      callback: function() {\n        this._injectDependencies();\n        this._installPhpDependencies();\n      }.bind(this)\n    });\n\n    if (this.env.options.ngRoute) {\n      this.invoke('angular-php:route', {\n        args: ['about']\n      });\n    }\n  });\n\n  this.pkg = require('../package.json');\n  this.sourceRoot(path.join(__dirname, '../templates/common'));\n};\n\nutil.inherits(Generator, yeoman.generators.Base);\n\nGenerator.prototype.welcome = function welcome() {\n  if (!this.options['skip-welcome-message']) {\n    this.log(yosay());\n    this.log(\n      chalk.magenta(\n        'Out of the box I include Bootstrap and some AngularJS recommended modules.' +\n        '\\n'\n      )\n    );\n  }\n\n  if (this.options.minsafe) {\n    this.log.error(\n      'The --minsafe flag has been removed. For more information, see' +\n      '\\nhttps://github.com/yeoman/generator-angular#minification-safe.' +\n      '\\n'\n    );\n  }\n};\n\nGenerator.prototype.askForCompass = function askForCompass() {\n  var cb = this.async();\n\n  this.prompt([{\n    type: 'confirm',\n    name: 'compass',\n    message: 'Would you like to use Sass (with Compass)?',\n    default: true\n  }], function (props) {\n    this.compass = props.compass;\n\n    cb();\n  }.bind(this));\n};\n\nGenerator.prototype.askForBootstrap = function askForBootstrap() {\n  var compass = this.compass;\n  var cb = this.async();\n\n  this.prompt([{\n    type: 'confirm',\n    name: 'bootstrap',\n    message: 'Would you like to include Bootstrap?',\n    default: true\n  }, {\n    type: 'confirm',\n    name: 'compassBootstrap',\n    message: 'Would you like to use the Sass version of Bootstrap?',\n    default: true,\n    when: function (props) {\n      return props.bootstrap && compass;\n    }\n  }], function (props) {\n    this.bootstrap = props.bootstrap;\n    this.compassBootstrap = props.compassBootstrap;\n\n    cb();\n  }.bind(this));\n};\n\nGenerator.prototype.askForModules = function askForModules() {\n  var cb = this.async();\n\n  var prompts = [{\n    type: 'checkbox',\n    name: 'modules',\n    message: 'Which modules would you like to include?',\n    choices: [\n    {\n      value: 'animateModule',\n      name: 'angular-animate.js',\n      checked: true\n    }, {\n      value: 'cookiesModule',\n      name: 'angular-cookies.js',\n      checked: true\n    }, {\n      value: 'resourceModule',\n      name: 'angular-resource.js',\n      checked: true\n    }, {\n      value: 'routeModule',\n      name: 'angular-route.js',\n      checked: true\n    }, {\n      value: 'sanitizeModule',\n      name: 'angular-sanitize.js',\n      checked: true\n    }, {\n      value: 'touchModule',\n      name: 'angular-touch.js',\n      checked: true\n    }\n    ]\n  }];\n\n  this.prompt(prompts, function (props) {\n    var hasMod = function (mod) { return props.modules.indexOf(mod) !== -1; };\n    this.animateModule = hasMod('animateModule');\n    this.cookiesModule = hasMod('cookiesModule');\n    this.resourceModule = hasMod('resourceModule');\n    this.routeModule = hasMod('routeModule');\n    this.sanitizeModule = hasMod('sanitizeModule');\n    this.touchModule = hasMod('touchModule');\n\n    var angMods = [];\n\n    if (this.animateModule) {\n      angMods.push(\"'ngAnimate'\");\n    }\n\n    if (this.cookiesModule) {\n      angMods.push(\"'ngCookies'\");\n    }\n\n    if (this.resourceModule) {\n      angMods.push(\"'ngResource'\");\n    }\n\n    if (this.routeModule) {\n      angMods.push(\"'ngRoute'\");\n      this.env.options.ngRoute = true;\n    }\n\n    if (this.sanitizeModule) {\n      angMods.push(\"'ngSanitize'\");\n    }\n\n    if (this.touchModule) {\n      angMods.push(\"'ngTouch'\");\n    }\n\n    if (angMods.length) {\n      this.env.options.angularDeps = '\\n    ' + angMods.join(',\\n    ') + '\\n  ';\n    }\n\n    cb();\n  }.bind(this));\n};\n\nGenerator.prototype.readIndex = function readIndex() {\n  this.ngRoute = this.env.options.ngRoute;\n  this.indexFile = this.engine(this.read('app/index.html'), this);\n};\n\nGenerator.prototype.bootstrapFiles = function bootstrapFiles() {\n  var cssFile = 'styles/main.' + (this.compass ? 's' : '') + 'css';\n  this.copy(\n    path.join('app', cssFile),\n    path.join(this.appPath, cssFile)\n  );\n};\n\nGenerator.prototype.appJs = function appJs() {\n  this.indexFile = this.appendFiles({\n    html: this.indexFile,\n    fileType: 'js',\n    optimizedPath: 'scripts/scripts.js',\n    sourceFileList: ['scripts/app.js', 'scripts/controllers/main.js'],\n    searchPath: ['.tmp', this.appPath]\n  });\n};\n\nGenerator.prototype.createIndexHtml = function createIndexHtml() {\n  this.indexFile = this.indexFile.replace(/&apos;/g, \"'\");\n  this.write(path.join(this.appPath, 'index.html'), this.indexFile);\n};\n\nGenerator.prototype.packageFiles = function packageFiles() {\n  this.coffee = this.env.options.coffee;\n  this.template('root/_bower.json', 'bower.json');\n  this.template('root/_bowerrc', '.bowerrc');\n  this.template('root/_package.json', 'package.json');\n  this.template('root/_Gruntfile.js', 'Gruntfile.js');\n};\n\nGenerator.prototype._injectDependencies = function _injectDependencies() {\n  if (this.options['skip-install']) {\n    this.log(\n      'After running `npm install & bower install`, inject your front end dependencies' +\n      '\\ninto your source code by running:' +\n      '\\n' +\n      '\\n' + chalk.yellow.bold('grunt wiredep')\n    );\n  } else {\n    wiredep({\n      directory: 'bower_components',\n      bowerJson: JSON.parse(fs.readFileSync('./bower.json')),\n      ignorePath: new RegExp('^(' + this.appPath + '|..)/'),\n      src: 'app/index.html',\n      fileTypes: {\n        html: {\n          replace: {\n            css: '<link rel=\"stylesheet\" href=\"{{filePath}}\">'\n          }\n        }\n      }\n    });\n  }\n};\n\nGenerator.prototype.phpFiles = function () {\n  this.sourceRoot(path.join(__dirname, 'templates'));\n  this.template('api/composer.json', 'app/api/composer.json');\n  this.template('api/phpunit.xml', 'app/api/phpunit.xml');\n  this.copy('api/index.php', 'app/api/index.php');\n  this.copy('api/Makefile', 'app/api/Makefile');\n  this.copy('api/_gitignore', 'app/api/.gitignore');\n  this.copy('api/.htaccess', 'app/api/.htaccess');\n  this.directory('api/config', 'app/api/config');\n  this.directory('api/src', 'app/api/src');\n  this.directory('api/tests', 'app/api/tests');\n};\n\nGenerator.prototype._installPhpDependencies = function _installPhpDependencies() {\n  console.log(\n    'Now running `make install --directory app/api`' +\n    ' to install the required Composer dependencies.' +\n    ' If this fails, try running the command yourself.'\n  );\n  this.spawnCommand('make', ['install', '--directory', 'app/api']);\n};\n","/home/travis/build/npmtest/node-npmtest-generator-angular-php/node_modules/generator-angular-php/util.js":"'use strict';\nvar path = require('path');\nvar fs = require('fs');\n\nfunction escapeRegExp (str) {\n  return str.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, '\\\\$&');\n}\n\nfunction rewrite (args) {\n  /* jshint -W044 */\n  // check if splicable is already in the body text\n  var re = new RegExp(args.splicable.map(function (line) {\n    return '\\s*' + escapeRegExp(line);\n  }).join('\\n'));\n\n  if (re.test(args.haystack)) {\n    return args.haystack;\n  }\n\n  var lines = args.haystack.split('\\n');\n\n  var otherwiseLineIndex = 0;\n  lines.forEach(function (line, i) {\n    if (line.indexOf(args.needle) !== -1) {\n      otherwiseLineIndex = i;\n    }\n  });\n\n  var spaces = 0;\n  while (lines[otherwiseLineIndex].charAt(spaces) === ' ') {\n    spaces += 1;\n  }\n\n  var spaceStr = '';\n  while ((spaces -= 1) >= 0) {\n    spaceStr += ' ';\n  }\n\n  lines.splice(otherwiseLineIndex, 0, args.splicable.map(function (line) {\n    return spaceStr + line;\n  }).join('\\n'));\n\n  return lines.join('\\n');\n}\n\nfunction rewriteFile (args) {\n  args.path = args.path || process.cwd();\n  var fullPath = path.join(args.path, args.file);\n\n  args.haystack = fs.readFileSync(fullPath, 'utf8');\n  var body = rewrite(args);\n\n  fs.writeFileSync(fullPath, body);\n}\n\nfunction appName (self) {\n  var counter = 0, suffix = self.options['app-suffix'];\n  // Have to check this because of generator bug #386\n  process.argv.forEach(function(val) {\n    if (val.indexOf('--app-suffix') > -1) {\n      counter++;\n    }\n  });\n  if (counter === 0 || (typeof suffix === 'boolean' && suffix)) {\n    suffix = 'App';\n  }\n  return suffix ? self._.classify(suffix) : '';\n}\n\n\nmodule.exports = {\n  rewrite: rewrite,\n  rewriteFile: rewriteFile,\n  appName: appName\n};\n","/home/travis/build/npmtest/node-npmtest-generator-angular-php/node_modules/generator-angular-php/script-base.js":"'use strict';\nvar util = require('util');\nvar path = require('path');\nvar yeoman = require('yeoman-generator');\nvar angularUtils = require('./util.js');\nvar chalk = require('chalk');\n\nvar Generator = module.exports = function Generator() {\n  yeoman.generators.NamedBase.apply(this, arguments);\n\n  try {\n    this.appname = require(path.join(process.cwd(), 'bower.json')).name;\n  } catch (e) {\n    this.appname = path.basename(process.cwd());\n  }\n  this.appname = this._.slugify(this._.humanize(this.appname));\n  this.scriptAppName = this._.camelize(this.appname) + angularUtils.appName(this);\n\n  this.cameledName = this._.camelize(this.name);\n  this.classedName = this._.classify(this.name);\n\n  if (typeof this.env.options.appPath === 'undefined') {\n    this.env.options.appPath = this.options.appPath;\n\n    if (!this.env.options.appPath) {\n      try {\n        this.env.options.appPath = require(path.join(process.cwd(), 'bower.json')).appPath;\n      } catch (e) {}\n    }\n    this.env.options.appPath = this.env.options.appPath || 'app';\n    this.options.appPath = this.env.options.appPath;\n  }\n\n  if (typeof this.env.options.testPath === 'undefined') {\n    try {\n      this.env.options.testPath = require(path.join(process.cwd(), 'bower.json')).testPath;\n    } catch (e) {}\n    this.env.options.testPath = this.env.options.testPath || 'test/spec';\n  }\n\n  this.env.options.coffee = this.options.coffee;\n  if (typeof this.env.options.coffee === 'undefined') {\n    this.option('coffee');\n\n    // attempt to detect if user is using CS or not\n    // if cml arg provided, use that; else look for the existence of cs\n    if (!this.options.coffee &&\n      this.expandFiles(path.join(this.env.options.appPath, '/scripts/**/*.coffee'), {}).length > 0) {\n      this.options.coffee = true;\n    }\n\n    this.env.options.coffee = this.options.coffee;\n  }\n\n  var sourceRoot = '/templates/javascript';\n  this.scriptSuffix = '.js';\n\n  if (this.env.options.coffee) {\n    sourceRoot = '/templates/coffeescript';\n    this.scriptSuffix = '.coffee';\n  }\n\n  this.sourceRoot(path.join(__dirname, sourceRoot));\n};\n\nutil.inherits(Generator, yeoman.generators.NamedBase);\n\nGenerator.prototype.appTemplate = function (src, dest) {\n  yeoman.generators.Base.prototype.template.apply(this, [\n    src + this.scriptSuffix,\n    path.join(this.env.options.appPath, dest.toLowerCase()) + this.scriptSuffix\n  ]);\n};\n\nGenerator.prototype.testTemplate = function (src, dest) {\n  yeoman.generators.Base.prototype.template.apply(this, [\n    src + this.scriptSuffix,\n    path.join(this.env.options.testPath, dest.toLowerCase()) + this.scriptSuffix\n  ]);\n};\n\nGenerator.prototype.htmlTemplate = function (src, dest) {\n  yeoman.generators.Base.prototype.template.apply(this, [\n    src,\n    path.join(this.env.options.appPath, dest.toLowerCase())\n  ]);\n};\n\nGenerator.prototype.addScriptToIndex = function (script) {\n  try {\n    var appPath = this.env.options.appPath;\n    var fullPath = path.join(appPath, 'index.html');\n    angularUtils.rewriteFile({\n      file: fullPath,\n      needle: '<!-- endbuild -->',\n      splicable: [\n        '<script src=\"scripts/' + script.toLowerCase().replace(/\\\\/g, '/') + '.js\"></script>'\n      ]\n    });\n  } catch (e) {\n    this.log.error(chalk.yellow(\n      '\\nUnable to find ' + fullPath + '. Reference to ' + script + '.js ' + 'not added.\\n'\n    ));\n  }\n};\n\nGenerator.prototype.generateSourceAndTest = function (appTemplate, testTemplate, targetDirectory, skipAdd) {\n  // Services use classified names\n  if (this.generatorName.toLowerCase() === 'service') {\n    this.cameledName = this.classedName;\n  }\n\n  this.appTemplate(appTemplate, path.join('scripts', targetDirectory, this.name));\n  this.testTemplate(testTemplate, path.join(targetDirectory, this.name));\n  if (!skipAdd) {\n    this.addScriptToIndex(path.join(targetDirectory, this.name));\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-generator-angular-php/node_modules/generator-angular-php/common/index.js":"'use strict';\nvar path = require('path');\nvar util = require('util');\nvar yeoman = require('yeoman-generator');\n\n\nvar Generator = module.exports = function Generator() {\n  yeoman.generators.Base.apply(this, arguments);\n};\n\nutil.inherits(Generator, yeoman.generators.Base);\n\nGenerator.prototype.setupEnv = function setupEnv() {\n  var join = path.join;\n\n  this.sourceRoot(join(__dirname, '../templates/common/root'));\n  this.copy('.editorconfig');\n  this.copy('.gitattributes');\n  this.copy('.jshintrc');\n  this.copy('gitignore', '.gitignore');\n  this.directory('test');\n\n  this.sourceRoot(join(__dirname, '../templates/common'));\n  var appPath = this.options.appPath;\n  var copy = function (dest) {\n    this.copy(join('app', dest), join(appPath, dest));\n  }.bind(this);\n\n  copy('.buildignore');\n  copy('.htaccess');\n  copy('404.html');\n  copy('favicon.ico');\n  copy('robots.txt');\n  copy('views/main.html');\n  this.directory(join('app', 'images'), join(appPath, 'images'));\n};\n","/home/travis/build/npmtest/node-npmtest-generator-angular-php/node_modules/generator-angular-php/templates/javascript/app.js":"'use strict';\n\n/**\n * @ngdoc overview\n * @name <%= scriptAppName %>\n * @description\n * # <%= scriptAppName %>\n *\n * Main module of the application.\n */\nangular\n  .module('<%= scriptAppName %>', [<%= angularModules %>])<% if (ngRoute) { %>\n  .config(function ($routeProvider) {\n    $routeProvider\n      .when('/', {\n        templateUrl: 'views/main.html',\n        controller: 'MainCtrl'\n      })\n      .otherwise({\n        redirectTo: '/'\n      });\n  })<% } %>;\n","/home/travis/build/npmtest/node-npmtest-generator-angular-php/node_modules/generator-angular-php/templates/javascript/controller.js":"'use strict';\n\n/**\n * @ngdoc function\n * @name <%= scriptAppName %>.controller:<%= classedName %>Ctrl\n * @description\n * # <%= classedName %>Ctrl\n * Controller of the <%= scriptAppName %>\n */\nangular.module('<%= scriptAppName %>')\n  .controller('<%= classedName %>Ctrl', function ($scope, $http) {\n\n    function createUnknownError(status) {\n      return {\n        status: status,\n        statusText: 'Internal Server Error',\n        description: 'No details available'\n      };\n    }\n\n    $scope.awesomeThings = [];\n    $scope.loading = true;\n\n    // Get awesome things list\n    $http({method: 'GET', url: '/api/features'}).\n\n      success(function (data) {\n        $scope.loading = false;\n        $scope.awesomeThings = data;\n\n        // Get description of each thing\n        $scope.awesomeThings.forEach(function (thing) {\n          thing.loading = true;\n\n          $http({method: 'GET', url: thing.href}).\n            success(function (data) {\n              thing.loading = false;\n              thing.description = data.description;\n            }).\n            error(function (data, status) {\n              thing.loading = false;\n              thing.error = data && data.description ? data : createUnknownError(status);\n            });\n        });\n      }).\n\n      error(function (data, status) {\n        $scope.loading = false;\n        $scope.error = data && data.description ? data : createUnknownError(status);\n      });\n  });\n","/home/travis/build/npmtest/node-npmtest-generator-angular-php/node_modules/generator-angular-php/templates/javascript/decorator.js":"'use strict';\n\n/**\n * @ngdoc function\n * @name <%= scriptAppName %>.decorator:<%= classedName %>\n * @description\n * # <%= classedName %>\n * Decorator of the <%= scriptAppName %>\n */\nangular.module('<%= scriptAppName %>')\n  .config(function ($provide) {\n    $provide.decorator('<%= cameledName %>', function ($delegate) {\n      // decorate the $delegate\n      return $delegate;\n    });\n  });\n","/home/travis/build/npmtest/node-npmtest-generator-angular-php/node_modules/generator-angular-php/templates/javascript/directive.js":"'use strict';\n\n/**\n * @ngdoc directive\n * @name <%= scriptAppName %>.directive:<%= cameledName %>\n * @description\n * # <%= cameledName %>\n */\nangular.module('<%= scriptAppName %>')\n  .directive('<%= cameledName %>', function () {\n    return {\n      template: '<div></div>',\n      restrict: 'E',\n      link: function postLink(scope, element, attrs) {\n        element.text('this is the <%= cameledName %> directive');\n      }\n    };\n  });\n","/home/travis/build/npmtest/node-npmtest-generator-angular-php/node_modules/generator-angular-php/templates/javascript/filter.js":"'use strict';\n\n/**\n * @ngdoc filter\n * @name <%= scriptAppName %>.filter:<%= cameledName %>\n * @function\n * @description\n * # <%= cameledName %>\n * Filter in the <%= scriptAppName %>.\n */\nangular.module('<%= scriptAppName %>')\n  .filter('<%= cameledName %>', function () {\n    return function (input) {\n      return '<%= cameledName %> filter: ' + input;\n    };\n  });\n","/home/travis/build/npmtest/node-npmtest-generator-angular-php/node_modules/generator-angular-php/templates/common/root/_Gruntfile.js":"// Generated on <%= (new Date).toISOString().split('T')[0] %> using <%= pkg.name %> <%= pkg.version %>\n'use strict';\n\n// # Globbing\n// for performance reasons we're only matching one level down:\n// 'test/spec/{,*/}*.js'\n// use this if you want to recursively match all subfolders:\n// 'test/spec/**/*.js'\n\nmodule.exports = function (grunt) {\n\n  // Load grunt tasks automatically\n  require('load-grunt-tasks')(grunt);\n\n  // Time how long tasks take. Can help when optimizing build times\n  require('time-grunt')(grunt);\n\n  // grunt-connect-proxy middleware to serve PHP\n  var proxyMiddleware = function (connect, options) {\n    var middlewares = [];\n    var directory = options.directory || options.base[options.base.length - 1];\n    if (!Array.isArray(options.base)) {\n      options.base = [options.base];\n    }\n\n    // Setup the proxy\n    middlewares.push(require('grunt-connect-proxy/lib/utils').proxyRequest);\n\n    options.base.forEach(function(base) {\n      // Serve static files.\n      middlewares.push(connect.static(base));\n    });\n\n    // Make directory browse-able.\n    middlewares.push(connect.directory(directory));\n\n    return middlewares;\n  };\n\n  // Configurable paths for the application\n  var appConfig = {\n    app: require('./bower.json').appPath || 'app',\n    dist: 'dist'\n  };\n\n  // Define the configuration for all the tasks\n  grunt.initConfig({\n\n    // Project settings\n    yeoman: appConfig,\n\n    // Watches files for changes and runs tasks based on the changed files\n    watch: {\n      bower: {\n        files: ['bower.json'],\n        tasks: ['wiredep']\n      },<% if (coffee) { %>\n      coffee: {\n        files: ['<%%= yeoman.app %>/scripts/{,*/}*.{coffee,litcoffee,coffee.md}'],\n        tasks: ['newer:coffee:dist']\n      },\n      coffeeTest: {\n        files: ['test/spec/{,*/}*.{coffee,litcoffee,coffee.md}'],\n        tasks: ['newer:coffee:test', 'karma']\n      },<% } else { %>\n      js: {\n        files: ['<%%= yeoman.app %>/scripts/{,*/}*.js'],\n        tasks: ['newer:jshint:all'],\n        options: {\n          livereload: '<%%= connect.options.livereload %>'\n        }\n      },\n      jsTest: {\n        files: ['test/spec/{,*/}*.js'],\n        tasks: ['newer:jshint:test', 'karma']\n      },<% } %><% if (compass) { %>\n      compass: {\n        files: ['<%%= yeoman.app %>/styles/{,*/}*.{scss,sass}'],\n        tasks: ['compass:server', 'autoprefixer']\n      },<% } else { %>\n      styles: {\n        files: ['<%%= yeoman.app %>/styles/{,*/}*.css'],\n        tasks: ['newer:copy:styles', 'autoprefixer']\n      },<% } %>\n      gruntfile: {\n        files: ['Gruntfile.js']\n      },\n      livereload: {\n        options: {\n          livereload: '<%%= connect.options.livereload %>'\n        },\n        files: [\n          '<%%= yeoman.app %>/api/{,{config,src,tests}/**/}/*',\n          '<%%= yeoman.app %>/{,*/}*.html',\n          '.tmp/styles/{,*/}*.css',<% if (coffee) { %>\n          '.tmp/scripts/{,*/}*.js',<% } %>\n          '<%%= yeoman.app %>/images/{,*/}*.{png,jpg,jpeg,gif,webp,svg}'\n        ]\n      },\n      phpTest: {\n        files: ['<%%= yeoman.app %>/api/{,{config,src,tests}/**/}/*'],\n        tasks: ['shell:phpTest']\n      }\n    },\n\n    // The actual grunt server settings\n    connect: {\n      options: {\n        port: 9000,\n        // Change this to '0.0.0.0' to access the server from outside.\n        hostname: 'localhost',\n        livereload: 35729\n      },\n      proxies: [\n        {\n          context: '/api',\n          host: 'localhost',\n          port: '<%%= php.options.port %>'\n        }\n      ],\n      livereload: {\n        options: {\n          open: true,\n          middleware: function (connect, options) {\n            return [\n              connect.static('.tmp'),\n              connect().use(\n                '/bower_components',\n                connect.static('./bower_components')\n              ),\n              connect.static(appConfig.app)\n            ].concat(proxyMiddleware(connect, options));\n          }\n        }\n      },\n      test: {\n        options: {\n          port: 9001,\n          middleware: function (connect, options) {\n            return [\n              connect.static('.tmp'),\n              connect.static('test'),\n              connect().use(\n                '/bower_components',\n                connect.static('./bower_components')\n              ),\n              connect.static(appConfig.app)\n            ].concat(proxyMiddleware(connect, options));\n          }\n        }\n      },\n      dist: {\n        options: {\n          open: true,\n          base: '<%%= yeoman.dist %>',\n          middleware: proxyMiddleware\n        }\n      }\n    },\n\n    // PHP built-in server\n    php: {\n      options: {\n        port: 8000,\n        // Change this to '0.0.0.0' to access the server from outside.\n        hostname: '127.0.0.1',\n        router: 'api/index.php'\n      },\n      server: {\n        options: {\n          base: '<%%= yeoman.app %>',\n        }\n      },\n      dist: {\n        options: {\n          base: '<%%= yeoman.dist %>',\n        }\n      }\n    },\n\n    // Make sure code styles are up to par and there are no obvious mistakes\n    jshint: {\n      options: {\n        jshintrc: '.jshintrc',\n        reporter: require('jshint-stylish')\n      },\n      all: {\n        src: [\n          'Gruntfile.js'<% if (!coffee) { %>,\n          '<%%= yeoman.app %>/scripts/{,*/}*.js'<% } %>\n        ]\n      }<% if (!coffee) { %>,\n      test: {\n        options: {\n          jshintrc: 'test/.jshintrc'\n        },\n        src: ['test/spec/{,*/}*.js']\n      }<% } %>\n    },\n\n    // Empties folders to start fresh\n    clean: {\n      dist: {\n        files: [{\n          dot: true,\n          src: [\n            '.tmp',\n            '<%%= yeoman.dist %>/{,*/}*',\n            '!<%%= yeoman.dist %>/.git*'\n          ]\n        }]\n      },\n      server: '.tmp'\n    },\n\n    // Add vendor prefixed styles\n    autoprefixer: {\n      options: {\n        browsers: ['last 1 version']\n      },\n      dist: {\n        files: [{\n          expand: true,\n          cwd: '.tmp/styles/',\n          src: '{,*/}*.css',\n          dest: '.tmp/styles/'\n        }]\n      }\n    },\n\n    // Automatically inject Bower components into the app\n    wiredep: {\n      options: {\n        cwd: '<%= yeoman.app %>'\n      },\n      app: {\n        src: ['<%%= yeoman.app %>/index.html'],\n        ignorePath:  /..\\//\n      }<% if (compass) { %>,\n      sass: {\n        src: ['<%%= yeoman.app %>/styles/{,*/}*.{scss,sass}'],\n        ignorePath: /(\\.\\.\\/){1,2}bower_components\\//\n      }<% } %>\n    },<% if (coffee) { %>\n\n    // Compiles CoffeeScript to JavaScript\n    coffee: {\n      options: {\n        sourceMap: true,\n        sourceRoot: ''\n      },\n      dist: {\n        files: [{\n          expand: true,\n          cwd: '<%%= yeoman.app %>/scripts',\n          src: '{,*/}*.coffee',\n          dest: '.tmp/scripts',\n          ext: '.js'\n        }]\n      },\n      test: {\n        files: [{\n          expand: true,\n          cwd: 'test/spec',\n          src: '{,*/}*.coffee',\n          dest: '.tmp/spec',\n          ext: '.js'\n        }]\n      }\n    },<% } %><% if (compass) { %>\n\n    // Compiles Sass to CSS and generates necessary files if requested\n    compass: {\n      options: {\n        sassDir: '<%%= yeoman.app %>/styles',\n        cssDir: '.tmp/styles',\n        generatedImagesDir: '.tmp/images/generated',\n        imagesDir: '<%%= yeoman.app %>/images',\n        javascriptsDir: '<%%= yeoman.app %>/scripts',\n        fontsDir: '<%%= yeoman.app %>/styles/fonts',\n        importPath: './bower_components',\n        httpImagesPath: '/images',\n        httpGeneratedImagesPath: '/images/generated',\n        httpFontsPath: '/styles/fonts',\n        relativeAssets: false,\n        assetCacheBuster: false,\n        raw: 'Sass::Script::Number.precision = 10\\n'\n      },\n      dist: {\n        options: {\n          generatedImagesDir: '<%%= yeoman.dist %>/images/generated'\n        }\n      },\n      server: {\n        options: {\n          debugInfo: true\n        }\n      }\n    },<% } %>\n\n    // Renames files for browser caching purposes\n    filerev: {\n      dist: {\n        src: [\n          '<%%= yeoman.dist %>/scripts/{,*/}*.js',\n          '<%%= yeoman.dist %>/styles/{,*/}*.css',\n          '<%%= yeoman.dist %>/images/{,*/}*.{png,jpg,jpeg,gif,webp,svg}',\n          '<%%= yeoman.dist %>/styles/fonts/*'\n        ]\n      }\n    },\n\n    // Reads HTML for usemin blocks to enable smart builds that automatically\n    // concat, minify and revision files. Creates configurations in memory so\n    // additional tasks can operate on them\n    useminPrepare: {\n      html: '<%%= yeoman.app %>/index.html',\n      options: {\n        dest: '<%%= yeoman.dist %>',\n        flow: {\n          html: {\n            steps: {\n              js: ['concat', 'uglifyjs'],\n              css: ['cssmin']\n            },\n            post: {}\n          }\n        }\n      }\n    },\n\n    // Performs rewrites based on filerev and the useminPrepare configuration\n    usemin: {\n      html: ['<%%= yeoman.dist %>/{,*/}*.html'],\n      css: ['<%%= yeoman.dist %>/styles/{,*/}*.css'],\n      options: {\n        assetsDirs: ['<%%= yeoman.dist %>','<%%= yeoman.dist %>/images']\n      }\n    },\n\n    // The following *-min tasks will produce minified files in the dist folder\n    // By default, your `index.html`'s <!-- Usemin block --> will take care of\n    // minification. These next options are pre-configured if you do not wish\n    // to use the Usemin blocks.\n    // cssmin: {\n    //   dist: {\n    //     files: {\n    //       '<%%= yeoman.dist %>/styles/main.css': [\n    //         '.tmp/styles/{,*/}*.css'\n    //       ]\n    //     }\n    //   }\n    // },\n    // uglify: {\n    //   dist: {\n    //     files: {\n    //       '<%%= yeoman.dist %>/scripts/scripts.js': [\n    //         '<%%= yeoman.dist %>/scripts/scripts.js'\n    //       ]\n    //     }\n    //   }\n    // },\n    // concat: {\n    //   dist: {}\n    // },\n\n    imagemin: {\n      dist: {\n        files: [{\n          expand: true,\n          cwd: '<%%= yeoman.app %>/images',\n          src: '{,*/}*.{png,jpg,jpeg,gif}',\n          dest: '<%%= yeoman.dist %>/images'\n        }]\n      }\n    },\n\n    svgmin: {\n      dist: {\n        files: [{\n          expand: true,\n          cwd: '<%%= yeoman.app %>/images',\n          src: '{,*/}*.svg',\n          dest: '<%%= yeoman.dist %>/images'\n        }]\n      }\n    },\n\n    htmlmin: {\n      dist: {\n        options: {\n          collapseWhitespace: true,\n          conservativeCollapse: true,\n          collapseBooleanAttributes: true,\n          removeCommentsFromCDATA: true,\n          removeOptionalTags: true\n        },\n        files: [{\n          expand: true,\n          cwd: '<%%= yeoman.dist %>',\n          src: ['*.html', 'views/{,*/}*.html'],\n          dest: '<%%= yeoman.dist %>'\n        }]\n      }\n    },\n\n    // ngmin tries to make the code safe for minification automatically by\n    // using the Angular long form for dependency injection. It doesn't work on\n    // things like resolve or inject so those have to be done manually.\n    ngmin: {\n      dist: {\n        files: [{\n          expand: true,\n          cwd: '.tmp/concat/scripts',\n          src: '*.js',\n          dest: '.tmp/concat/scripts'\n        }]\n      }\n    },\n\n    // Replace Google CDN references\n    cdnify: {\n      dist: {\n        html: ['<%%= yeoman.dist %>/*.html']\n      }\n    },\n\n    // Copies remaining files to places other tasks can use\n    copy: {\n      dist: {\n        files: [{\n          expand: true,\n          dot: true,\n          cwd: '<%%= yeoman.app %>',\n          dest: '<%%= yeoman.dist %>',\n          src: [\n            'api/{{config,src,vendor}/**,index.php,.htaccess}',\n            '*.{ico,png,txt}',\n            '.htaccess',\n            '*.html',\n            'views/{,*/}*.html',\n            'images/{,*/}*.{webp}',\n            'fonts/*'\n          ]\n        }, {\n          expand: true,\n          cwd: '.tmp/images',\n          dest: '<%%= yeoman.dist %>/images',\n          src: ['generated/*']\n        }<% if (bootstrap) { %>, {\n          expand: true,\n          cwd: '<% if (!compassBootstrap) {\n              %>bower_components/bootstrap/dist<%\n            } else {\n              %>.<%\n            } %>',\n          src: '<% if (compassBootstrap) {\n              %>bower_components/bootstrap-sass-official/vendor/assets/fonts/bootstrap<%\n            } else { %>fonts<% }\n            %>/*',\n          dest: '<%%= yeoman.dist %>'\n        }<% } %>]\n      },\n      styles: {\n        expand: true,\n        cwd: '<%%= yeoman.app %>/styles',\n        dest: '.tmp/styles/',\n        src: '{,*/}*.css'\n      }\n    },\n\n    // Run some tasks in parallel to speed up the build process\n    concurrent: {\n      server: [<% if (coffee) { %>\n        'coffee:dist',<% } %><% if (compass) { %>\n        'compass:server'<% } else { %>\n        'copy:styles'<% } %>\n      ],\n      test: [<% if (coffee) { %>\n        'coffee',<% } %><% if (compass) { %>\n        'compass'<% } else { %>\n        'copy:styles'<% } %>\n      ],\n      dist: [<% if (coffee) { %>\n        'coffee',<% } %><% if (compass) { %>\n        'compass:dist',<% } else { %>\n        'copy:styles',<% } %>\n        'imagemin',\n        'svgmin'\n      ]\n    },\n\n    shell: {\n      options: {\n        stdout: true,\n        stderr: true,\n        failOnError: true\n      },\n      phpTest: {\n        command: 'make --directory <%%= yeoman.app %>/api test'\n      },\n      phpUpdate: {\n        command: 'make --directory <%%= yeoman.app %>/api update'\n      }\n    },\n\n    // Test settings\n    karma: {\n      unit: {\n        configFile: 'test/karma.conf.<% if (coffee) {\n          %>coffee<% } else {\n          %>js<% }\n          %>',\n        singleRun: true\n      }\n    }\n  });\n\n\n  grunt.registerTask('serve', 'Compile then start a connect web server', function (target) {\n    if (target === 'dist') {\n      return grunt.task.run([\n        'build',\n        'configureProxies',\n        'php:dist',\n        'connect:dist:keepalive'\n      ]);\n    }\n\n    grunt.task.run([\n      'clean:server',\n      'wiredep',\n      'concurrent:server',\n      'autoprefixer',\n      'configureProxies',\n      'php:server',\n      'connect:livereload',\n      'watch'\n    ]);\n  });\n\n  grunt.registerTask('server', 'DEPRECATED TASK. Use the \"serve\" task instead', function (target) {\n    grunt.log.warn('The `server` task has been deprecated. Use `grunt serve` to start a server.');\n    grunt.task.run(['serve:' + target]);\n  });\n\n  grunt.registerTask('test', [\n    'clean:server',\n    'shell:phpTest',\n    'concurrent:test',\n    'autoprefixer',\n    'connect:test',\n    'karma'\n  ]);\n\n  grunt.registerTask('build', [\n    'clean:dist',\n    'shell:phpUpdate',\n    'wiredep',\n    'useminPrepare',\n    'concurrent:dist',\n    'autoprefixer',\n    'concat',\n    'ngmin',\n    'copy:dist',\n    'cdnify',\n    'cssmin',\n    'uglify',\n    'filerev',\n    'usemin',\n    'htmlmin'\n  ]);\n\n  grunt.registerTask('default', [\n    'newer:jshint',\n    'test',\n    'build'\n  ]);\n};\n","/home/travis/build/npmtest/node-npmtest-generator-angular-php/node_modules/generator-angular-php/templates/javascript/service/constant.js":"'use strict';\n\n/**\n * @ngdoc service\n * @name <%= scriptAppName %>.<%= cameledName %>\n * @description\n * # <%= cameledName %>\n * Constant in the <%= scriptAppName %>.\n */\nangular.module('<%= scriptAppName %>')\n  .constant('<%= cameledName %>', 42);\n","/home/travis/build/npmtest/node-npmtest-generator-angular-php/node_modules/generator-angular-php/templates/javascript/service/factory.js":"'use strict';\n\n/**\n * @ngdoc service\n * @name <%= scriptAppName %>.<%= cameledName %>\n * @description\n * # <%= cameledName %>\n * Factory in the <%= scriptAppName %>.\n */\nangular.module('<%= scriptAppName %>')\n  .factory('<%= cameledName %>', function () {\n    // Service logic\n    // ...\n\n    var meaningOfLife = 42;\n\n    // Public API here\n    return {\n      someMethod: function () {\n        return meaningOfLife;\n      }\n    };\n  });\n","/home/travis/build/npmtest/node-npmtest-generator-angular-php/node_modules/generator-angular-php/templates/javascript/service/provider.js":"'use strict';\n\n/**\n * @ngdoc service\n * @name <%= scriptAppName %>.<%= cameledName %>\n * @description\n * # <%= cameledName %>\n * Provider in the <%= scriptAppName %>.\n */\nangular.module('<%= scriptAppName %>')\n  .provider('<%= cameledName %>', function () {\n\n    // Private variables\n    var salutation = 'Hello';\n\n    // Private constructor\n    function Greeter() {\n      this.greet = function () {\n        return salutation;\n      };\n    }\n\n    // Public API for configuration\n    this.setSalutation = function (s) {\n      salutation = s;\n    };\n\n    // Method for instantiating\n    this.$get = function () {\n      return new Greeter();\n    };\n  });\n","/home/travis/build/npmtest/node-npmtest-generator-angular-php/node_modules/generator-angular-php/templates/javascript/service/service.js":"'use strict';\n\n/**\n * @ngdoc service\n * @name <%= scriptAppName %>.<%= cameledName %>\n * @description\n * # <%= cameledName %>\n * Service in the <%= scriptAppName %>.\n */\nangular.module('<%= scriptAppName %>')\n  .service('<%= classedName %>', function <%= classedName %>() {\n    // AngularJS will instantiate a singleton by calling \"new\" on this function\n  });\n","/home/travis/build/npmtest/node-npmtest-generator-angular-php/node_modules/generator-angular-php/templates/javascript/service/value.js":"'use strict';\n\n/**\n * @ngdoc service\n * @name <%= scriptAppName %>.<%= cameledName %>\n * @description\n * # <%= cameledName %>\n * Value in the <%= scriptAppName %>.\n */\nangular.module('<%= scriptAppName %>')\n  .value('<%= cameledName %>', 42);\n"}